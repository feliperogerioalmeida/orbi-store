generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Simulation {
  id             String   @id @default(uuid())
  userId         String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  model          String
  color          String
  capacity       String
  batteryHealth  String
  issues         String
  estimatedValue Float
  createdAt      DateTime @default(now())
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  emailVerified DateTime?
  firstName     String
  lastName      String
  password      String
  role          Role
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  simulations   Simulation[]
  reviews       Review[]
  position      String?
  phoneNumber   String?
  address       Address?
  birthdate     DateTime?
  cpf           String?
  cnpj          String?
  personType    PersonType?
  fullName      String?
  pixKey        String?
  status        Status          @default(ACTIVE)
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING
}

enum PersonType {
  FISICA
  JURIDICA
}

model Company {
  id                         String          @id @default(uuid())
  name                       String?
  socialName                 String?
  cnpj                       String?         @unique
  phoneNumber                String?
  email                      String?         @unique
  stateNumber                String?
  creationDate               DateTime?
  digitalCertificate         String?
  digitalCertificatePassword String?
  lastNFEIssued              String?
  NFESeries                  String?
  lastCouponIssued           String?
  couponSeries               String?
  CSC                        String?
  CSCId                      String?
  companyAddress             CompanyAddress?
  Movement                   Movement[]
}

model CompanyAddress {
  id           String  @id @default(uuid())
  street       String
  number       String
  city         String
  complement   String?
  zipCode      String
  neighborhood String
  state        String
  country      String
  ibge         String
  companyId    String  @unique
  company      Company @relation(fields: [companyId], references: [id])
}

model Address {
  id           String  @id @default(uuid())
  street       String
  number       String
  city         String
  complement   String?
  zipCode      String
  neighborhood String
  state        String
  country      String
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model iPhone {
  id         String     @id @default(cuid())
  model      String
  colors     Color[]
  capacities Capacity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Color {
  id       String @id @default(cuid())
  name     String
  imageUrl String
  iphoneId String
  iphone   iPhone @relation(fields: [iphoneId], references: [id], onDelete: Cascade)
}

model Capacity {
  id         String      @id @default(cuid())
  size       String
  iphoneId   String
  iphone     iPhone      @relation(fields: [iphoneId], references: [id], onDelete: Cascade)
  conditions Condition[]
}

model Condition {
  id              String   @id @default(cuid())
  conditionType   String
  capacityId      String
  capacity        Capacity @relation(fields: [capacityId], references: [id], onDelete: Cascade)
  costPrice       Float
  sellingPrice    Float
  maxUpgradePrice Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  EMPLOYEE
  CLIENT
  ADMIN
  MASTER
}

model ChartOfAccounts {
  id           String            @id @default(uuid())
  code         String            @unique
  name         String
  type         AccountType
  balance      Float             @default(0)
  balanceType  BalanceType
  parentCode   String?
  parent       ChartOfAccounts?  @relation("ParentChild", fields: [parentCode], references: [code])
  children     ChartOfAccounts[] @relation("ParentChild")
  isAnalytical Boolean           @default(false)
  movements    Movement[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  Bank         Bank?
}

model Movement {
  id              String          @id @default(uuid())
  companyId       String
  company         Company         @relation(fields: [companyId], references: [id])
  accountId       String
  account         ChartOfAccounts @relation(fields: [accountId], references: [id])
  type            MovementType
  amount          Float
  description     String
  transactionDate DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum BalanceType {
  DEBIT
  CREDIT
  BOTH
}

enum MovementType {
  DEBIT
  CREDIT
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
  COST
}

model Bank {
  id                 String            @id @default(uuid())
  name               String            @unique
  accountCode        String            @unique
  account            ChartOfAccounts   @relation(fields: [accountCode], references: [code])
  initialBalance     Decimal
  initialBalanceDate DateTime
  isActive           Boolean           @default(true)
  formsOfReceiving   ReceivingMethod[]
  formsOfPayment     PaymentMethod[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model ReceivingMethod {
  id                String        @id @default(uuid())
  bankId            String
  bank              Bank          @relation(fields: [bankId], references: [id], onDelete: Cascade)
  method            PaymentType
  receiveTimeInDays Int           @default(0)
  taxRate           Decimal       @default(0)
  typeOfRate        RateType?
  installments      Installment[]
}

model PaymentMethod {
  id         String      @id @default(uuid())
  bankId     String
  bank       Bank        @relation(fields: [bankId], references: [id], onDelete: Cascade)
  method     PaymentType
  taxRate    Decimal     @default(0)
  typeOfRate RateType?
}

model Installment {
  id                String          @id @default(uuid())
  receivingMethodId String
  receivingMethod   ReceivingMethod @relation(fields: [receivingMethodId], references: [id], onDelete: Cascade)
  installmentNumber Int
  taxRate           Decimal
  typeOfRate        RateType        @default(PERCENTAGE)
}

enum PaymentType {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BILL
  CASH
}

enum RateType {
  PERCENTAGE
  CASH
}
