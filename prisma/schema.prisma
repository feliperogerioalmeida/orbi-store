generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Simulation {
  id             String   @id @default(uuid())
  userId         String? // Usuário logado, se disponível
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  model          String
  color          String
  capacity       String
  batteryHealth  String
  issues         String[]
  estimatedValue Float
  createdAt      DateTime @default(now())
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  emailVerified DateTime?
  firstName     String?
  lastName      String
  password      String
  role          Role
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  simulations   Simulation[]
  reviews       Review[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model iPhone {
  id         String     @id @default(cuid())
  model      String
  colors     Color[]
  capacities Capacity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Color {
  id       String @id @default(cuid())
  name     String
  imageUrl String
  iphoneId String
  iphone   iPhone @relation(fields: [iphoneId], references: [id], onDelete: Cascade)
}

model Capacity {
  id         String      @id @default(cuid())
  size       String
  iphoneId   String
  iphone     iPhone      @relation(fields: [iphoneId], references: [id], onDelete: Cascade)
  conditions Condition[]
}

model Condition {
  id              String   @id @default(cuid())
  conditionType   String
  capacityId      String
  capacity        Capacity @relation(fields: [capacityId], references: [id], onDelete: Cascade)
  costPrice       Float
  sellingPrice    Float
  maxUpgradePrice Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  EMPLOYEE
  CLIENT
  ADMIN
  MASTER
}
